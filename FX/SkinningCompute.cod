//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbSkinned
{
    float4x4 gBoneTransforms[128];      // Offset:    0, size: 8192
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gWorldViewProj;            // Offset:  192, size:   64
}

//
// 3 local object(s)
//
StructuredBuffer gVertices;
StructuredBuffer gInputSkinData;
RWStructuredBuffer gDestVertices;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ComputeSkinning
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[128];     // Offset:    0 Size:  8192
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64
                //
                // }
                //
                // Resource bind info for gVertices
                // {
                //
                //   struct vertex
                //   {
                //       
                //       float3 PosL;                   // Offset:    0
                //       float3 NormalL;                // Offset:   12
                //       float2 Tex;                    // Offset:   24
                //       float3 tan;                    // Offset:   32
                //       float3 bitan;                  // Offset:   44
                //
                //   } $Element;                        // Offset:    0 Size:    56
                //
                // }
                //
                // Resource bind info for gInputSkinData
                // {
                //
                //   struct skinData
                //   {
                //       
                //       float3 Weights;                // Offset:    0
                //       int4 BoneIndices;              // Offset:   12
                //
                //   } $Element;                        // Offset:    0 Size:    28
                //
                // }
                //
                // Resource bind info for gDestVertices
                // {
                //
                //   struct resultVertex
                //   {
                //       
                //       float3 PosL;                   // Offset:    0
                //       float4 PosH;                   // Offset:   12
                //       float3 PosW;                   // Offset:   28
                //       float3 NormalW;                // Offset:   40
                //       float2 Tex;                    // Offset:   52
                //       float4 TanW;                   // Offset:   60
                //       float4 BiTanW;                 // Offset:   76
                //
                //   } $Element;                        // Offset:    0 Size:    92
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gVertices                         texture  struct         r/o    0        1
                // gInputSkinData                    texture  struct         r/o    1        1
                // gDestVertices                         UAV  struct         r/w    0        1
                // cbSkinned                         cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[511], dynamicIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_resource_structured t0, 56 
                dcl_resource_structured t1, 28 
                dcl_uav_structured u0, 92
                dcl_input vThreadID.x
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                dcl_thread_group 256, 1, 1
                
                #line 111 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\SkinningCompute.fx"
                mov r0.x, vThreadID.x
                ld_structured_indexable(structured_buffer, stride=28)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(0), t1.xxxx  // gInputSkinData<0>
                mov x0[0].x, r0.y  // weights<0>
                ld_structured_indexable(structured_buffer, stride=28)(mixed,mixed,mixed,mixed) r0.z, r0.x, l(4), t1.xxxx  // gInputSkinData<0>
                mov x0[1].x, r0.z  // weights<1>
                ld_structured_indexable(structured_buffer, stride=28)(mixed,mixed,mixed,mixed) r0.w, r0.x, l(8), t1.xxxx  // gInputSkinData<0>
                mov x0[2].x, r0.w  // weights<2>
                mov r0.y, -r0.y
                add r0.y, r0.y, l(1.000000)
                mov r0.z, -r0.z
                add r0.y, r0.z, r0.y
                mov r0.z, -r0.w
                add r0.y, r0.z, r0.y
                mov x0[3].x, r0.y  // weights<3>
                
                #line 121
                mov r1.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.yzw, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, l(0,0,0,0)  // bitanL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, l(0)  // i<0>
                loop 
                  ilt r3.w, r2.w, l(4)
                  breakc_z r3.w
                
                #line 125
                  imad r3.w, r2.w, l(4), l(12)
                  ld_structured_indexable(structured_buffer, stride=28)(mixed,mixed,mixed,mixed) r3.w, r0.x, r3.w, t1.xxxx  // gInputSkinData<0>
                  ine r4.x, r3.w, l(-1)
                  if_nz r4.x
                
                #line 128
                    mov r4.x, r2.w
                    mov r4.x, x0[r4.x + 0].x  // weights<0:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.x, r0.x, l(0), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.y, r0.x, l(4), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.z, r0.x, l(8), t0.xxxx  // gVertices<0>
                    imul null, r3.w, r3.w, l(4)
                    mov r5.w, l(1.000000)
                    dp4 r6.x, r5.xyzw, cb0[r3.w + 0].xyzw
                    dp4 r6.y, r5.xyzw, cb0[r3.w + 1].xyzw
                    dp4 r6.z, r5.xyzw, cb0[r3.w + 2].xyzw
                    mul r4.yzw, r4.xxxx, r6.xxyz
                    add r1.xyz, r1.xyzx, r4.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.x, r0.x, l(12), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.y, r0.x, l(16), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.z, r0.x, l(20), t0.xxxx  // gVertices<0>
                    dp3 r6.x, r5.xyzx, cb0[r3.w + 0].xyzx
                    dp3 r6.y, r5.xyzx, cb0[r3.w + 1].xyzx
                    dp3 r6.z, r5.xyzx, cb0[r3.w + 2].xyzx
                    mul r4.yzw, r4.xxxx, r6.xxyz
                    add r0.yzw, r0.yyzw, r4.yyzw  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.x, r0.x, l(32), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.y, r0.x, l(36), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.z, r0.x, l(40), t0.xxxx  // gVertices<0>
                    dp3 r6.x, r5.xyzx, cb0[r3.w + 0].xyzx
                    dp3 r6.y, r5.xyzx, cb0[r3.w + 1].xyzx
                    dp3 r6.z, r5.xyzx, cb0[r3.w + 2].xyzx
                    mul r4.yzw, r4.xxxx, r6.xxyz
                    add r2.xyz, r2.xyzx, r4.yzwy  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.x, r0.x, l(44), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.y, r0.x, l(48), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r5.z, r0.x, l(52), t0.xxxx  // gVertices<0>
                    dp3 r6.x, r5.xyzx, cb0[r3.w + 0].xyzx
                    dp3 r6.y, r5.xyzx, cb0[r3.w + 1].xyzx
                    dp3 r6.z, r5.xyzx, cb0[r3.w + 2].xyzx
                    mul r4.xyz, r4.xxxx, r6.xyzx
                    add r3.xyz, r3.xyzx, r4.xyzx  // bitanL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 125
                  else 
                
                #line 139
                    mov r3.w, r2.w
                    mov r3.w, x0[r3.w + 0].x  // weights<0:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.x, r0.x, l(0), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.y, r0.x, l(4), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.z, r0.x, l(8), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=28)(mixed,mixed,mixed,mixed) r5.x, r0.x, l(12), t1.xxxx  // gInputSkinData<0>
                    imul null, r5.x, r5.x, l(4)
                    mov r4.w, l(1.000000)
                    dp4 r6.x, r4.xyzw, cb0[r5.x + 0].xyzw
                    dp4 r6.y, r4.xyzw, cb0[r5.x + 1].xyzw
                    dp4 r6.z, r4.xyzw, cb0[r5.x + 2].xyzw
                    mul r4.xyz, r3.wwww, r6.xyzx
                    add r1.xyz, r1.xyzx, r4.xyzx  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.x, r0.x, l(12), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.y, r0.x, l(16), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.z, r0.x, l(20), t0.xxxx  // gVertices<0>
                    dp3 r6.x, r4.xyzx, cb0[r5.x + 0].xyzx
                    dp3 r6.y, r4.xyzx, cb0[r5.x + 1].xyzx
                    dp3 r6.z, r4.xyzx, cb0[r5.x + 2].xyzx
                    mul r4.xyz, r3.wwww, r6.xyzx
                    add r0.yzw, r0.yyzw, r4.xxyz  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.x, r0.x, l(32), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.y, r0.x, l(36), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.z, r0.x, l(40), t0.xxxx  // gVertices<0>
                    dp3 r6.x, r4.xyzx, cb0[r5.x + 0].xyzx
                    dp3 r6.y, r4.xyzx, cb0[r5.x + 1].xyzx
                    dp3 r6.z, r4.xyzx, cb0[r5.x + 2].xyzx
                    mul r4.xyz, r3.wwww, r6.xyzx
                    add r2.xyz, r2.xyzx, r4.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.x, r0.x, l(44), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.y, r0.x, l(48), t0.xxxx  // gVertices<0>
                    ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r4.z, r0.x, l(52), t0.xxxx  // gVertices<0>
                    dp3 r6.x, r4.xyzx, cb0[r5.x + 0].xyzx
                    dp3 r6.y, r4.xyzx, cb0[r5.x + 1].xyzx
                    dp3 r6.z, r4.xyzx, cb0[r5.x + 2].xyzx
                    mul r4.xyz, r3.wwww, r6.xyzx
                    add r3.xyz, r3.xyzx, r4.xyzx  // bitanL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 125
                  endif 
                
                #line 121
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 150
                store_structured u0.x, r0.x, l(0), r1.x  // gDestVertices<0>
                store_structured u0.x, r0.x, l(4), r1.y  // gDestVertices<0>
                store_structured u0.x, r0.x, l(8), r1.z  // gDestVertices<0>
                mov r1.w, l(1.000000)
                dp4 r2.w, r1.xyzw, cb1[12].xyzw
                dp4 r3.w, r1.xyzw, cb1[13].xyzw
                dp4 r4.x, r1.xyzw, cb1[14].xyzw
                dp4 r4.y, r1.xyzw, cb1[15].xyzw
                store_structured u0.x, r0.x, l(12), r2.w  // gDestVertices<0>
                store_structured u0.x, r0.x, l(16), r3.w  // gDestVertices<0>
                store_structured u0.x, r0.x, l(20), r4.x  // gDestVertices<0>
                store_structured u0.x, r0.x, l(24), r4.y  // gDestVertices<0>
                dp4 r2.w, r1.xyzw, cb1[0].xyzw
                dp4 r3.w, r1.xyzw, cb1[1].xyzw
                dp4 r1.x, r1.xyzw, cb1[2].xyzw
                store_structured u0.x, r0.x, l(28), r2.w  // gDestVertices<0>
                store_structured u0.x, r0.x, l(32), r3.w  // gDestVertices<0>
                store_structured u0.x, r0.x, l(36), r1.x  // gDestVertices<0>
                dp3 r1.x, r0.yzwy, cb1[4].xyzx
                dp3 r1.y, r0.yzwy, cb1[5].xyzx
                dp3 r0.y, r0.yzwy, cb1[6].xyzx
                store_structured u0.x, r0.x, l(40), r1.x  // gDestVertices<0>
                store_structured u0.x, r0.x, l(44), r1.y  // gDestVertices<0>
                store_structured u0.x, r0.x, l(48), r0.y  // gDestVertices<0>
                ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(24), t0.xxxx  // gVertices<0>
                ld_structured_indexable(structured_buffer, stride=56)(mixed,mixed,mixed,mixed) r0.z, r0.x, l(28), t0.xxxx  // gVertices<0>
                store_structured u0.x, r0.x, l(52), r0.y  // gDestVertices<0>
                store_structured u0.x, r0.x, l(56), r0.z  // gDestVertices<0>
                dp3 r0.y, r2.xyzx, cb1[0].xyzx
                dp3 r0.z, r2.xyzx, cb1[1].xyzx
                dp3 r0.w, r2.xyzx, cb1[2].xyzx
                store_structured u0.x, r0.x, l(60), r0.y  // gDestVertices<0>
                store_structured u0.x, r0.x, l(64), r0.z  // gDestVertices<0>
                store_structured u0.x, r0.x, l(68), r0.w  // gDestVertices<0>
                store_structured u0.x, r0.x, l(72), l(0)  // gDestVertices<0>
                dp3 r0.y, r3.xyzx, cb1[0].xyzx
                dp3 r0.z, r3.xyzx, cb1[1].xyzx
                dp3 r0.w, r3.xyzx, cb1[2].xyzx
                store_structured u0.x, r0.x, l(76), r0.y  // gDestVertices<0>
                store_structured u0.x, r0.x, l(80), r0.z  // gDestVertices<0>
                store_structured u0.x, r0.x, l(84), r0.w  // gDestVertices<0>
                store_structured u0.x, r0.x, l(88), l(0)  // gDestVertices<0>
                
                #line 107
                ret 
                // Approximately 146 instruction slots used
                            
            };
        }

    }

}

