//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[100];   // Offset:    0, size: 6400
    int     dirLight_size = 0;          // Offset: 6400, size:    4
    PointLight gPointLights[100];       // Offset: 6416, size: 8000
    int     pointLight_size = 0;        // Offset: 14416, size:    4
    SpotLight gSpotLights[100];         // Offset: 14432, size: 9600
    int     spotLight_size = 0;         // Offset: 24032, size:    4
    float3  gEyePosW;                   // Offset: 24036, size:   12
    float   gFogStart;                  // Offset: 24048, size:    4
    float   gFogRange;                  // Offset: 24052, size:    4
    float4  gFogColor;                  // Offset: 24064, size:   16
    float   gMinDist;                   // Offset: 24080, size:    4
    float   gMaxDist;                   // Offset: 24084, size:    4
    float   gMinTess;                   // Offset: 24088, size:    4
    float   gMaxTess;                   // Offset: 24092, size:    4
    float   gTexelCellSpaceU;           // Offset: 24096, size:    4
    float   gTexelCellSpaceV;           // Offset: 24100, size:    4
    float   gWorldCellSpace;            // Offset: 24104, size:    4
    float2  gTexScale = { 50 };         // Offset: 24112, size:    8
    float4  gWorldFrustumPlanes[6];     // Offset: 24128, size:   96
}

cbuffer cbPerObject
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
    float4x4 gTexTransform;             // Offset:   64, size:   64
    float4x4 gShadowTransform;          // Offset:  128, size:   64
    bool    isShadowed;                 // Offset:  192, size:    4
    Material gMaterial;                 // Offset:  208, size:   64
}

//
// 7 local object(s)
//
Texture2DArray gLayerMapArray;
Texture2D gBlendMap;
Texture2D gHeightMap;
Texture2D gShadowMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samHeightmap
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 106 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 110
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 113
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[8].xyzw  // vout<7:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb0[9].xyzw  // vout<8:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb0[10].xyzw  // vout<9:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb0[11].xyzw  // vout<10:NaN:Inf>
                
                #line 116
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o2.xyzw, r2.xyzw  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 17 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400 [unused]
                //   int dirLight_size;                 // Offset: 6400 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000 [unused]
                //   int pointLight_size;               // Offset: 14416 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600 [unused]
                //   int spotLight_size;                // Offset: 24032 Size:     4 [unused]
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4
                //   float gMaxDist;                    // Offset: 24084 Size:     4
                //   float gMinTess;                    // Offset: 24088 Size:     4
                //   float gMaxTess;                    // Offset: 24092 Size:     4
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1514], dynamicIndexed
                
                #line 252 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_input v[4][2].xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // hout<5,6,7,8>
                mov r2.xyzw, v[r0.x + 0][2].xyzw  // HS<5,6,7,8>
                mov o2.xyzw, r2.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 182
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 187
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 154
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 158
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 137
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 1508].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 140
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 143
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 148
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 158
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 154
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 164
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 192
                  mov r1.x, l(0)
                
                #line 202
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 192
                  mov o5.x, l(0)
                
                #line 214
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[1502].yzwy
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[1505].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[1505].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[1505].w
                  add r0.w, r0.w, cb0[1505].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 220
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 221
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 222
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 223
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 225
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 228
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 192
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 164 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_input vicp[4][2].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_temps 6
                
                #line 281 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 286
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r2.xy, r1.zwzz, r2.xyxx  // dout<7:NaN:Inf,8:NaN:Inf>
                mov r1.zw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 291
                mov r3.xyzw, -vicp[0][2].xyzw
                add r3.xyzw, r3.xyzw, vicp[1][2].xyzw
                mul r3.xyzw, r3.xyzw, vDomain.xxxx
                add r3.xyzw, r3.xyzw, vicp[0][2].xyzw
                mov r4.xyzw, -vicp[2][2].xyzw
                add r4.xyzw, r4.xyzw, vicp[3][2].xyzw
                mul r4.xyzw, r4.xyzw, vDomain.xxxx
                add r4.xyzw, r4.xyzw, vicp[2][2].xyzw
                mov r5.xyzw, -r3.xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, r4.xyzw, vDomain.yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw  // dout<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 296
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.z, r2.xyzw, cb0[4].xyzw  // dout<9:NaN:Inf>
                dp4 r4.w, r2.xyzw, cb0[5].xyzw  // dout<10:NaN:Inf>
                
                #line 299
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.x, r0.y  // dout<5:Inf>
                
                #line 307
                mov r0.w, l(1.000000)
                dp4 r5.x, r0.xyzw, cb0[0].xyzw  // dout<0:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[1].xyzw  // dout<1:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb0[2].xyzw  // dout<2:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb0[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r5.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r4.zzzw  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o3.xyzw, r3.xyzw  // DS<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.x  // DS<5:Inf>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400
                //   int dirLight_size;                 // Offset: 6400 Size:     4
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000
                //   int pointLight_size;               // Offset: 14416 Size:     4
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600
                //   int spotLight_size;                // Offset: 24032 Size:     4
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4 [unused]
                //   float gMaxDist;                    // Offset: 24084 Size:     4 [unused]
                //   float gMinTess;                    // Offset: 24088 Size:     4 [unused]
                //   float gMaxTess;                    // Offset: 24092 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // gShadowMap                        texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000} }
                dcl_constantbuffer cb0[1507], dynamicIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 22
                
                #line 319 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.x, -cb0[1506].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[1506].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[1506].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[1506].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[1506].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 330
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[1506].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 335
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[1502].yzwy  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 338
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 341
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 348
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 355
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 358
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 377
                ine r0.w, l(0, 0, 0, 0), cb1[12].x
                if_nz r0.w
                  nop 
                  mov r3.xyzw, v3.xyzw  // shadowPosH<0,1,2,3>
                
                #line 241 "LightHelper.fx"
                  div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 244
                  mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 261
                  add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                  add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                  add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                  add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                  add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.yzyy, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 264
                  div r3.x, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                  mov r3.x, r3.x  // CalcShadowFactor<0:[0f,1f]>
                
                #line 379 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r3.x, r3.x  // shadow<0:[0f,1f]>
                else 
                  mov r3.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 384
                ilt r0.w, l(0), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r4.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r5.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r6.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r7.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                  mov r8.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                  mov r9.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                  mov r10.xyz, cb0[3].xyzx  // L<12,13,14>
                  mov r11.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r10.xyz, -r10.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r10.xyzx, r11.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r7.xyz, -r10.xyzx
                  dp3 r3.w, r7.xyzx, r11.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r10.xyz, r3.wwww, r11.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r7.xyzx, r12.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r6.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyzw, r5.xyzw, r0.wwww
                  mul r5.xyzw, r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r6.xyzw, r3.wwww
                  mul r6.xyzw, r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r5.xyzw, r1.wwww, r5.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r6.xyzw, r1.wwww, r6.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r4.xyzw, r4.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r5.xyzw, r5.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r6.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r5.xyzw, r3.xxxx, r5.xyzw
                  add r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r3.xxxx, r6.xyzw
                  add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 384
                else 
                  mov r4.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r5.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r6.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                ilt r0.w, l(1), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[7].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r3.w, r10.xyzx, r14.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r13.xyz, r3.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r10.xyzx, r15.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r9.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r0.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r3.wwww
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r1.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                ilt r0.w, l(2), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[11].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r3.w, r10.xyzx, r14.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r13.xyz, r3.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r10.xyzx, r15.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r9.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r0.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r3.wwww
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r1.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                
                #line 397
                mov r0.w, l(0)  // i<0: 0>
                mov r7.xyzw, r4.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.w, r0.w  // i<0>
                loop 
                  ilt r3.w, r1.w, cb0[901].x
                  breakc_z r3.w
                
                #line 400
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.w, r1.w, l(5)
                  mov r13.xyzw, cb0[r3.w + 401].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.w + 402].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.w + 403].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.w + 404].xyzx  // L<12,13,14>
                  mov r16.w, cb0[r3.w + 404].w  // L<15>
                  mov r17.xyz, cb0[r3.w + 405].xyzx  // L<16,17,18>
                  mov r18.xyz, v1.xyzx  // pos<0,1,2>
                  mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114 "LightHelper.fx"
                  mov r18.xyz, -r18.xyzx
                  add r16.xyz, r16.xyzx, r18.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 117
                  dp3 r3.w, r16.xyzx, r16.xyzx
                  sqrt r18.y, r3.w  // d<0:NaN:Inf>
                
                #line 120
                  lt r3.w, r16.w, r18.y
                
                #line 124
                  if_z r3.w
                    div r16.xyz, r16.xyzx, r18.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 132
                    dp3 r3.w, r16.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                    lt r13.x, l(0.000000), r3.w
                    mov r13.yzw, -r16.xxyz
                    dp3 r16.x, r13.yzwy, r19.xyzx
                    add r16.x, r16.x, r16.x
                    mov r16.x, -r16.x
                    mul r16.xyz, r16.xxxx, r19.xyzx
                    add r13.yzw, r13.yyzw, r16.xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.y, r13.yzwy, r20.xyzx
                    max r13.y, r13.y, l(0.000000)
                    log r13.y, r13.y
                    mul r13.y, r12.w, r13.y
                    exp r13.y, r13.y  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r3.wwww
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.yyyy
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 136
                    movc r11.xyzw, r13.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 146
                    mul r18.z, r18.y, r18.y
                    mov r18.x, l(1.000000)
                    dp3 r3.w, r17.xyzx, r18.xyzx
                    div r3.w, l(1.000000), r3.w  // att<0:NaN:Inf>
                    mul r11.xyzw, r3.wwww, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r3.wwww, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 124
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 400 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 404
                  mov r3.w, r1.w
                  mov r3.y, l(1.000000)
                  dp3 r3.y, r3.xyyx, icb[r3.w + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r8.xyzw, r8.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r9.xyzw, r9.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 397
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 410
                mov r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r6.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.w, r0.w  // i<0>
                loop 
                  ilt r3.y, r1.w, cb0[1502].x
                  breakc_z r3.y
                
                #line 413
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.y, r1.w, l(6)
                  mov r13.xyzw, cb0[r3.y + 902].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.y + 903].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.y + 904].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.y + 905].xyzx  // L<12,13,14>
                  mov r17.xyz, cb0[r3.y + 906].xyzx  // L<16,17,18>
                  mov r18.xyz, cb0[r3.y + 907].xyzx  // L<20,21,22>
                  mov r3.w, cb0[r3.y + 905].w  // L<15>
                  mov r3.y, cb0[r3.y + 906].w  // L<19>
                  mov r19.xyz, v1.xyzx  // pos<0,1,2>
                  mov r20.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r21.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 166 "LightHelper.fx"
                  mov r19.xyz, -r19.xyzx
                  add r16.xyz, r16.xyzx, r19.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  dp3 r16.w, r16.xyzx, r16.xyzx
                  sqrt r19.y, r16.w  // d<0:NaN:Inf>
                
                #line 172
                  lt r3.w, r3.w, r19.y
                
                #line 176
                  if_z r3.w
                    div r16.xyz, r16.xyzx, r19.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 184
                    dp3 r3.w, r16.xyzx, r20.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 188
                    lt r13.x, l(0.000000), r3.w
                    mov r13.yzw, -r16.xxyz
                    dp3 r16.x, r13.yzwy, r20.xyzx
                    add r16.x, r16.x, r16.x
                    mov r16.x, -r16.x
                    mul r16.xyz, r16.xxxx, r20.xyzx
                    add r16.xyz, r13.yzwy, r16.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r16.x, r16.xyzx, r21.xyzx
                    max r16.x, r16.x, l(0.000000)
                    log r16.x, r16.x
                    mul r16.x, r12.w, r16.x
                    exp r16.x, r16.x  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r3.wwww
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r16.xxxx
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 188
                    movc r11.xyzw, r13.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 198
                    dp3 r3.w, r13.yzwy, r17.xyzx
                    max r3.w, r3.w, l(0.000000)
                    log r3.w, r3.w
                    mul r3.y, r3.w, r3.y
                    exp r3.y, r3.y  // spot<0:NaN:Inf>
                
                #line 201
                    mul r19.z, r19.y, r19.y
                    mov r19.x, l(1.000000)
                    dp3 r3.w, r18.xyzx, r19.xyzx
                    div r3.w, r3.y, r3.w  // att<0:NaN:Inf>
                    mul r10.xyzw, r3.yyyy, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r11.xyzw, r3.wwww, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r3.wwww, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 176
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 413 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 417
                  mov r3.y, r1.w
                  mov r3.z, l(1.000000)
                  dp3 r3.y, r3.xzzx, icb[r3.y + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r5.xyzw, r5.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r6.xyzw, r6.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 410
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 423
                add r0.xyzw, r4.xyzw, r5.xyzw
                mul r0.xyzw, r0.xyzw, r2.xyzw
                add r0.xyzw, r6.xyzw, r0.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 438
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 403 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 106 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 110
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 113
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[8].xyzw  // vout<7:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb0[9].xyzw  // vout<8:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb0[10].xyzw  // vout<9:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb0[11].xyzw  // vout<10:NaN:Inf>
                
                #line 116
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o2.xyzw, r2.xyzw  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 17 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400 [unused]
                //   int dirLight_size;                 // Offset: 6400 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000 [unused]
                //   int pointLight_size;               // Offset: 14416 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600 [unused]
                //   int spotLight_size;                // Offset: 24032 Size:     4 [unused]
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4
                //   float gMaxDist;                    // Offset: 24084 Size:     4
                //   float gMinTess;                    // Offset: 24088 Size:     4
                //   float gMaxTess;                    // Offset: 24092 Size:     4
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1514], dynamicIndexed
                
                #line 252 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_input v[4][2].xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // hout<5,6,7,8>
                mov r2.xyzw, v[r0.x + 0][2].xyzw  // HS<5,6,7,8>
                mov o2.xyzw, r2.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 182
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 187
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 154
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 158
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 137
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 1508].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 140
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 143
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 148
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 158
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 154
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 164
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 192
                  mov r1.x, l(0)
                
                #line 202
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 192
                  mov o5.x, l(0)
                
                #line 214
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[1502].yzwy
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[1505].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[1505].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[1505].w
                  add r0.w, r0.w, cb0[1505].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 220
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 221
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 222
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 223
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 225
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 228
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 192
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 164 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_input vicp[4][2].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_temps 6
                
                #line 281 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 286
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r2.xy, r1.zwzz, r2.xyxx  // dout<7:NaN:Inf,8:NaN:Inf>
                mov r1.zw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 291
                mov r3.xyzw, -vicp[0][2].xyzw
                add r3.xyzw, r3.xyzw, vicp[1][2].xyzw
                mul r3.xyzw, r3.xyzw, vDomain.xxxx
                add r3.xyzw, r3.xyzw, vicp[0][2].xyzw
                mov r4.xyzw, -vicp[2][2].xyzw
                add r4.xyzw, r4.xyzw, vicp[3][2].xyzw
                mul r4.xyzw, r4.xyzw, vDomain.xxxx
                add r4.xyzw, r4.xyzw, vicp[2][2].xyzw
                mov r5.xyzw, -r3.xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, r4.xyzw, vDomain.yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw  // dout<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 296
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.z, r2.xyzw, cb0[4].xyzw  // dout<9:NaN:Inf>
                dp4 r4.w, r2.xyzw, cb0[5].xyzw  // dout<10:NaN:Inf>
                
                #line 299
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.x, r0.y  // dout<5:Inf>
                
                #line 307
                mov r0.w, l(1.000000)
                dp4 r5.x, r0.xyzw, cb0[0].xyzw  // dout<0:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[1].xyzw  // dout<1:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb0[2].xyzw  // dout<2:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb0[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r5.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r4.zzzw  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o3.xyzw, r3.xyzw  // DS<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.x  // DS<5:Inf>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400
                //   int dirLight_size;                 // Offset: 6400 Size:     4
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000
                //   int pointLight_size;               // Offset: 14416 Size:     4
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600
                //   int spotLight_size;                // Offset: 24032 Size:     4
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4 [unused]
                //   float gMaxDist;                    // Offset: 24084 Size:     4 [unused]
                //   float gMinTess;                    // Offset: 24088 Size:     4 [unused]
                //   float gMaxTess;                    // Offset: 24092 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // gShadowMap                        texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000} }
                dcl_constantbuffer cb0[1507], dynamicIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 22
                
                #line 319 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.x, -cb0[1506].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[1506].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[1506].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[1506].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[1506].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 330
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[1506].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 335
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[1502].yzwy  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 338
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 341
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 348
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 355
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 358
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 377
                ine r0.w, l(0, 0, 0, 0), cb1[12].x
                if_nz r0.w
                  nop 
                  mov r3.xyzw, v3.xyzw  // shadowPosH<0,1,2,3>
                
                #line 241 "LightHelper.fx"
                  div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 244
                  mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 261
                  add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                  add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                  add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                  add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                  add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.yzyy, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 264
                  div r3.x, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                  mov r3.x, r3.x  // CalcShadowFactor<0:[0f,1f]>
                
                #line 379 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r3.x, r3.x  // shadow<0:[0f,1f]>
                else 
                  mov r3.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 384
                ilt r0.w, l(0), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r4.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r5.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r6.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r7.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                  mov r8.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                  mov r9.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                  mov r10.xyz, cb0[3].xyzx  // L<12,13,14>
                  mov r11.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r10.xyz, -r10.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r10.xyzx, r11.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r7.xyz, -r10.xyzx
                  dp3 r3.w, r7.xyzx, r11.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r10.xyz, r3.wwww, r11.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r7.xyzx, r12.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r6.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyzw, r5.xyzw, r0.wwww
                  mul r5.xyzw, r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r6.xyzw, r3.wwww
                  mul r6.xyzw, r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r5.xyzw, r1.wwww, r5.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r6.xyzw, r1.wwww, r6.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r4.xyzw, r4.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r5.xyzw, r5.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r6.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r5.xyzw, r3.xxxx, r5.xyzw
                  add r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r3.xxxx, r6.xyzw
                  add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 384
                else 
                  mov r4.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r5.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r6.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                ilt r0.w, l(1), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[7].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r3.w, r10.xyzx, r14.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r13.xyz, r3.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r10.xyzx, r15.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r9.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r0.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r3.wwww
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r1.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                ilt r0.w, l(2), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[11].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r3.w, r10.xyzx, r14.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r13.xyz, r3.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r10.xyzx, r15.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r9.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r0.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r3.wwww
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r1.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                
                #line 397
                mov r0.w, l(0)  // i<0: 0>
                mov r7.xyzw, r4.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.w, r0.w  // i<0>
                loop 
                  ilt r3.w, r1.w, cb0[901].x
                  breakc_z r3.w
                
                #line 400
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.w, r1.w, l(5)
                  mov r13.xyzw, cb0[r3.w + 401].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.w + 402].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.w + 403].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.w + 404].xyzx  // L<12,13,14>
                  mov r16.w, cb0[r3.w + 404].w  // L<15>
                  mov r17.xyz, cb0[r3.w + 405].xyzx  // L<16,17,18>
                  mov r18.xyz, v1.xyzx  // pos<0,1,2>
                  mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114 "LightHelper.fx"
                  mov r18.xyz, -r18.xyzx
                  add r16.xyz, r16.xyzx, r18.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 117
                  dp3 r3.w, r16.xyzx, r16.xyzx
                  sqrt r18.y, r3.w  // d<0:NaN:Inf>
                
                #line 120
                  lt r3.w, r16.w, r18.y
                
                #line 124
                  if_z r3.w
                    div r16.xyz, r16.xyzx, r18.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 132
                    dp3 r3.w, r16.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                    lt r13.x, l(0.000000), r3.w
                    mov r13.yzw, -r16.xxyz
                    dp3 r16.x, r13.yzwy, r19.xyzx
                    add r16.x, r16.x, r16.x
                    mov r16.x, -r16.x
                    mul r16.xyz, r16.xxxx, r19.xyzx
                    add r13.yzw, r13.yyzw, r16.xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.y, r13.yzwy, r20.xyzx
                    max r13.y, r13.y, l(0.000000)
                    log r13.y, r13.y
                    mul r13.y, r12.w, r13.y
                    exp r13.y, r13.y  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r3.wwww
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.yyyy
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 136
                    movc r11.xyzw, r13.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 146
                    mul r18.z, r18.y, r18.y
                    mov r18.x, l(1.000000)
                    dp3 r3.w, r17.xyzx, r18.xyzx
                    div r3.w, l(1.000000), r3.w  // att<0:NaN:Inf>
                    mul r11.xyzw, r3.wwww, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r3.wwww, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 124
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 400 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 404
                  mov r3.w, r1.w
                  mov r3.y, l(1.000000)
                  dp3 r3.y, r3.xyyx, icb[r3.w + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r8.xyzw, r8.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r9.xyzw, r9.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 397
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 410
                mov r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r6.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.w, r0.w  // i<0>
                loop 
                  ilt r3.y, r1.w, cb0[1502].x
                  breakc_z r3.y
                
                #line 413
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.y, r1.w, l(6)
                  mov r13.xyzw, cb0[r3.y + 902].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.y + 903].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.y + 904].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.y + 905].xyzx  // L<12,13,14>
                  mov r17.xyz, cb0[r3.y + 906].xyzx  // L<16,17,18>
                  mov r18.xyz, cb0[r3.y + 907].xyzx  // L<20,21,22>
                  mov r3.w, cb0[r3.y + 905].w  // L<15>
                  mov r3.y, cb0[r3.y + 906].w  // L<19>
                  mov r19.xyz, v1.xyzx  // pos<0,1,2>
                  mov r20.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r21.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 166 "LightHelper.fx"
                  mov r19.xyz, -r19.xyzx
                  add r16.xyz, r16.xyzx, r19.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  dp3 r16.w, r16.xyzx, r16.xyzx
                  sqrt r19.y, r16.w  // d<0:NaN:Inf>
                
                #line 172
                  lt r3.w, r3.w, r19.y
                
                #line 176
                  if_z r3.w
                    div r16.xyz, r16.xyzx, r19.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 184
                    dp3 r3.w, r16.xyzx, r20.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 188
                    lt r13.x, l(0.000000), r3.w
                    mov r13.yzw, -r16.xxyz
                    dp3 r16.x, r13.yzwy, r20.xyzx
                    add r16.x, r16.x, r16.x
                    mov r16.x, -r16.x
                    mul r16.xyz, r16.xxxx, r20.xyzx
                    add r16.xyz, r13.yzwy, r16.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r16.x, r16.xyzx, r21.xyzx
                    max r16.x, r16.x, l(0.000000)
                    log r16.x, r16.x
                    mul r16.x, r12.w, r16.x
                    exp r16.x, r16.x  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r3.wwww
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r16.xxxx
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 188
                    movc r11.xyzw, r13.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 198
                    dp3 r3.w, r13.yzwy, r17.xyzx
                    max r3.w, r3.w, l(0.000000)
                    log r3.w, r3.w
                    mul r3.y, r3.w, r3.y
                    exp r3.y, r3.y  // spot<0:NaN:Inf>
                
                #line 201
                    mul r19.z, r19.y, r19.y
                    mov r19.x, l(1.000000)
                    dp3 r3.w, r18.xyzx, r19.xyzx
                    div r3.w, r3.y, r3.w  // att<0:NaN:Inf>
                    mul r10.xyzw, r3.yyyy, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r11.xyzw, r3.wwww, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r3.wwww, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 176
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 413 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 417
                  mov r3.y, r1.w
                  mov r3.z, l(1.000000)
                  dp3 r3.y, r3.xzzx, icb[r3.y + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r5.xyzw, r5.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r6.xyzw, r6.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 410
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 423
                add r0.xyzw, r4.xyzw, r5.xyzw
                mul r0.xyzw, r0.xyzw, r2.xyzw
                add r0.xyzw, r6.xyzw, r0.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 438
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 403 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 106 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 110
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 113
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[8].xyzw  // vout<7:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb0[9].xyzw  // vout<8:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb0[10].xyzw  // vout<9:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb0[11].xyzw  // vout<10:NaN:Inf>
                
                #line 116
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o2.xyzw, r2.xyzw  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 17 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400 [unused]
                //   int dirLight_size;                 // Offset: 6400 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000 [unused]
                //   int pointLight_size;               // Offset: 14416 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600 [unused]
                //   int spotLight_size;                // Offset: 24032 Size:     4 [unused]
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4
                //   float gMaxDist;                    // Offset: 24084 Size:     4
                //   float gMinTess;                    // Offset: 24088 Size:     4
                //   float gMaxTess;                    // Offset: 24092 Size:     4
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1514], dynamicIndexed
                
                #line 252 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_input v[4][2].xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // hout<5,6,7,8>
                mov r2.xyzw, v[r0.x + 0][2].xyzw  // HS<5,6,7,8>
                mov o2.xyzw, r2.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 182
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 187
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 154
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 158
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 137
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 1508].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 140
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 143
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 148
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 158
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 154
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 164
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 192
                  mov r1.x, l(0)
                
                #line 202
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 192
                  mov o5.x, l(0)
                
                #line 214
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[1502].yzwy
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[1505].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[1505].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[1505].w
                  add r0.w, r0.w, cb0[1505].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 220
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 221
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 222
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 223
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 225
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 228
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 192
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 164 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_input vicp[4][2].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_temps 6
                
                #line 281 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 286
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r2.xy, r1.zwzz, r2.xyxx  // dout<7:NaN:Inf,8:NaN:Inf>
                mov r1.zw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 291
                mov r3.xyzw, -vicp[0][2].xyzw
                add r3.xyzw, r3.xyzw, vicp[1][2].xyzw
                mul r3.xyzw, r3.xyzw, vDomain.xxxx
                add r3.xyzw, r3.xyzw, vicp[0][2].xyzw
                mov r4.xyzw, -vicp[2][2].xyzw
                add r4.xyzw, r4.xyzw, vicp[3][2].xyzw
                mul r4.xyzw, r4.xyzw, vDomain.xxxx
                add r4.xyzw, r4.xyzw, vicp[2][2].xyzw
                mov r5.xyzw, -r3.xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, r4.xyzw, vDomain.yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw  // dout<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 296
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.z, r2.xyzw, cb0[4].xyzw  // dout<9:NaN:Inf>
                dp4 r4.w, r2.xyzw, cb0[5].xyzw  // dout<10:NaN:Inf>
                
                #line 299
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.x, r0.y  // dout<5:Inf>
                
                #line 307
                mov r0.w, l(1.000000)
                dp4 r5.x, r0.xyzw, cb0[0].xyzw  // dout<0:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[1].xyzw  // dout<1:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb0[2].xyzw  // dout<2:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb0[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r5.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r4.zzzw  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o3.xyzw, r3.xyzw  // DS<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.x  // DS<5:Inf>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400
                //   int dirLight_size;                 // Offset: 6400 Size:     4
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000
                //   int pointLight_size;               // Offset: 14416 Size:     4
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600
                //   int spotLight_size;                // Offset: 24032 Size:     4
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4 [unused]
                //   float gMaxDist;                    // Offset: 24084 Size:     4 [unused]
                //   float gMinTess;                    // Offset: 24088 Size:     4 [unused]
                //   float gMaxTess;                    // Offset: 24092 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // gShadowMap                        texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000} }
                dcl_constantbuffer cb0[1507], dynamicIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 22
                
                #line 319 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.x, -cb0[1506].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[1506].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[1506].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[1506].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[1506].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 330
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[1506].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 335
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[1502].yzwy  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 338
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 341
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 348
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 355
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 358
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 377
                ine r0.w, l(0, 0, 0, 0), cb1[12].x
                if_nz r0.w
                  nop 
                  mov r3.xyzw, v3.xyzw  // shadowPosH<0,1,2,3>
                
                #line 241 "LightHelper.fx"
                  div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 244
                  mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 261
                  add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                  add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                  add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                  add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                  add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.yzyy, t3.xxxx, s2, r3.x
                  add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 264
                  div r3.x, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                  mov r3.x, r3.x  // CalcShadowFactor<0:[0f,1f]>
                
                #line 379 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r3.x, r3.x  // shadow<0:[0f,1f]>
                else 
                  mov r3.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 384
                ilt r0.w, l(0), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r4.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r5.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r6.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r7.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                  mov r8.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                  mov r9.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                  mov r10.xyz, cb0[3].xyzx  // L<12,13,14>
                  mov r11.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r10.xyz, -r10.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r10.xyzx, r11.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r7.xyz, -r10.xyzx
                  dp3 r3.w, r7.xyzx, r11.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r10.xyz, r3.wwww, r11.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r7.xyzx, r12.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r6.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyzw, r5.xyzw, r0.wwww
                  mul r5.xyzw, r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r6.xyzw, r3.wwww
                  mul r6.xyzw, r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r5.xyzw, r1.wwww, r5.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r6.xyzw, r1.wwww, r6.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r4.xyzw, r4.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r5.xyzw, r5.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r6.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r5.xyzw, r3.xxxx, r5.xyzw
                  add r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r3.xxxx, r6.xyzw
                  add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 384
                else 
                  mov r4.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r5.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r6.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                ilt r0.w, l(1), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[7].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r3.w, r10.xyzx, r14.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r13.xyz, r3.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r10.xyzx, r15.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r9.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r0.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r3.wwww
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r1.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                ilt r0.w, l(2), cb0[400].x
                if_nz r0.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[11].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r0.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r1.w, l(0.000000), r0.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r3.w, r10.xyzx, r14.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r13.xyz, r3.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r10.xyzx, r15.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r9.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r0.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r3.wwww
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r1.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                
                #line 397
                mov r0.w, l(0)  // i<0: 0>
                mov r7.xyzw, r4.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.w, r0.w  // i<0>
                loop 
                  ilt r3.w, r1.w, cb0[901].x
                  breakc_z r3.w
                
                #line 400
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.w, r1.w, l(5)
                  mov r13.xyzw, cb0[r3.w + 401].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.w + 402].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.w + 403].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.w + 404].xyzx  // L<12,13,14>
                  mov r16.w, cb0[r3.w + 404].w  // L<15>
                  mov r17.xyz, cb0[r3.w + 405].xyzx  // L<16,17,18>
                  mov r18.xyz, v1.xyzx  // pos<0,1,2>
                  mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114 "LightHelper.fx"
                  mov r18.xyz, -r18.xyzx
                  add r16.xyz, r16.xyzx, r18.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 117
                  dp3 r3.w, r16.xyzx, r16.xyzx
                  sqrt r18.y, r3.w  // d<0:NaN:Inf>
                
                #line 120
                  lt r3.w, r16.w, r18.y
                
                #line 124
                  if_z r3.w
                    div r16.xyz, r16.xyzx, r18.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 132
                    dp3 r3.w, r16.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                    lt r13.x, l(0.000000), r3.w
                    mov r13.yzw, -r16.xxyz
                    dp3 r16.x, r13.yzwy, r19.xyzx
                    add r16.x, r16.x, r16.x
                    mov r16.x, -r16.x
                    mul r16.xyz, r16.xxxx, r19.xyzx
                    add r13.yzw, r13.yyzw, r16.xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.y, r13.yzwy, r20.xyzx
                    max r13.y, r13.y, l(0.000000)
                    log r13.y, r13.y
                    mul r13.y, r12.w, r13.y
                    exp r13.y, r13.y  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r3.wwww
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.yyyy
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 136
                    movc r11.xyzw, r13.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 146
                    mul r18.z, r18.y, r18.y
                    mov r18.x, l(1.000000)
                    dp3 r3.w, r17.xyzx, r18.xyzx
                    div r3.w, l(1.000000), r3.w  // att<0:NaN:Inf>
                    mul r11.xyzw, r3.wwww, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r3.wwww, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 124
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 400 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 404
                  mov r3.w, r1.w
                  mov r3.y, l(1.000000)
                  dp3 r3.y, r3.xyyx, icb[r3.w + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r8.xyzw, r8.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r9.xyzw, r9.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 397
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 410
                mov r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r6.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r1.w, r0.w  // i<0>
                loop 
                  ilt r3.y, r1.w, cb0[1502].x
                  breakc_z r3.y
                
                #line 413
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.y, r1.w, l(6)
                  mov r13.xyzw, cb0[r3.y + 902].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.y + 903].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.y + 904].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.y + 905].xyzx  // L<12,13,14>
                  mov r17.xyz, cb0[r3.y + 906].xyzx  // L<16,17,18>
                  mov r18.xyz, cb0[r3.y + 907].xyzx  // L<20,21,22>
                  mov r3.w, cb0[r3.y + 905].w  // L<15>
                  mov r3.y, cb0[r3.y + 906].w  // L<19>
                  mov r19.xyz, v1.xyzx  // pos<0,1,2>
                  mov r20.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r21.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 166 "LightHelper.fx"
                  mov r19.xyz, -r19.xyzx
                  add r16.xyz, r16.xyzx, r19.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  dp3 r16.w, r16.xyzx, r16.xyzx
                  sqrt r19.y, r16.w  // d<0:NaN:Inf>
                
                #line 172
                  lt r3.w, r3.w, r19.y
                
                #line 176
                  if_z r3.w
                    div r16.xyz, r16.xyzx, r19.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 184
                    dp3 r3.w, r16.xyzx, r20.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 188
                    lt r13.x, l(0.000000), r3.w
                    mov r13.yzw, -r16.xxyz
                    dp3 r16.x, r13.yzwy, r20.xyzx
                    add r16.x, r16.x, r16.x
                    mov r16.x, -r16.x
                    mul r16.xyz, r16.xxxx, r20.xyzx
                    add r16.xyz, r13.yzwy, r16.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r16.x, r16.xyzx, r21.xyzx
                    max r16.x, r16.x, l(0.000000)
                    log r16.x, r16.x
                    mul r16.x, r12.w, r16.x
                    exp r16.x, r16.x  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r3.wwww
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r16.xxxx
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 188
                    movc r11.xyzw, r13.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 198
                    dp3 r3.w, r13.yzwy, r17.xyzx
                    max r3.w, r3.w, l(0.000000)
                    log r3.w, r3.w
                    mul r3.y, r3.w, r3.y
                    exp r3.y, r3.y  // spot<0:NaN:Inf>
                
                #line 201
                    mul r19.z, r19.y, r19.y
                    mov r19.x, l(1.000000)
                    dp3 r3.w, r18.xyzx, r19.xyzx
                    div r3.w, r3.y, r3.w  // att<0:NaN:Inf>
                    mul r10.xyzw, r3.yyyy, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r11.xyzw, r3.wwww, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r3.wwww, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 176
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 413 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 417
                  mov r3.y, r1.w
                  mov r3.z, l(1.000000)
                  dp3 r3.y, r3.xzzx, icb[r3.y + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r5.xyzw, r5.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r6.xyzw, r6.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 410
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 423
                add r0.xyzw, r4.xyzw, r5.xyzw
                mul r0.xyzw, r0.xyzw, r2.xyzw
                add r0.xyzw, r6.xyzw, r0.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 438
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 403 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 106 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 110
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 113
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[8].xyzw  // vout<7:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb0[9].xyzw  // vout<8:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb0[10].xyzw  // vout<9:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb0[11].xyzw  // vout<10:NaN:Inf>
                
                #line 116
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o2.xyzw, r2.xyzw  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 17 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400 [unused]
                //   int dirLight_size;                 // Offset: 6400 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000 [unused]
                //   int pointLight_size;               // Offset: 14416 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600 [unused]
                //   int spotLight_size;                // Offset: 24032 Size:     4 [unused]
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4
                //   float gMaxDist;                    // Offset: 24084 Size:     4
                //   float gMinTess;                    // Offset: 24088 Size:     4
                //   float gMaxTess;                    // Offset: 24092 Size:     4
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1514], dynamicIndexed
                
                #line 252 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_input v[4][2].xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // hout<5,6,7,8>
                mov r2.xyzw, v[r0.x + 0][2].xyzw  // HS<5,6,7,8>
                mov o2.xyzw, r2.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 182
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 187
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 154
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 158
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 137
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 1508].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 140
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 143
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 148
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 158
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 154
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 164
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 192
                  mov r1.x, l(0)
                
                #line 202
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 192
                  mov o5.x, l(0)
                
                #line 214
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[1502].yzwy
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[1505].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[1505].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[1505].w
                  add r0.w, r0.w, cb0[1505].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 220
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 221
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 222
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 223
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 225
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 228
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 192
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 164 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_input vicp[4][2].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_temps 6
                
                #line 281 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 286
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r2.xy, r1.zwzz, r2.xyxx  // dout<7:NaN:Inf,8:NaN:Inf>
                mov r1.zw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 291
                mov r3.xyzw, -vicp[0][2].xyzw
                add r3.xyzw, r3.xyzw, vicp[1][2].xyzw
                mul r3.xyzw, r3.xyzw, vDomain.xxxx
                add r3.xyzw, r3.xyzw, vicp[0][2].xyzw
                mov r4.xyzw, -vicp[2][2].xyzw
                add r4.xyzw, r4.xyzw, vicp[3][2].xyzw
                mul r4.xyzw, r4.xyzw, vDomain.xxxx
                add r4.xyzw, r4.xyzw, vicp[2][2].xyzw
                mov r5.xyzw, -r3.xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, r4.xyzw, vDomain.yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw  // dout<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 296
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.z, r2.xyzw, cb0[4].xyzw  // dout<9:NaN:Inf>
                dp4 r4.w, r2.xyzw, cb0[5].xyzw  // dout<10:NaN:Inf>
                
                #line 299
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.x, r0.y  // dout<5:Inf>
                
                #line 307
                mov r0.w, l(1.000000)
                dp4 r5.x, r0.xyzw, cb0[0].xyzw  // dout<0:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[1].xyzw  // dout<1:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb0[2].xyzw  // dout<2:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb0[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r5.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r4.zzzw  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o3.xyzw, r3.xyzw  // DS<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.x  // DS<5:Inf>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400
                //   int dirLight_size;                 // Offset: 6400 Size:     4
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000
                //   int pointLight_size;               // Offset: 14416 Size:     4
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600
                //   int spotLight_size;                // Offset: 24032 Size:     4
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4
                //   float gFogRange;                   // Offset: 24052 Size:     4
                //   float4 gFogColor;                  // Offset: 24064 Size:    16
                //   float gMinDist;                    // Offset: 24080 Size:     4 [unused]
                //   float gMaxDist;                    // Offset: 24084 Size:     4 [unused]
                //   float gMinTess;                    // Offset: 24088 Size:     4 [unused]
                //   float gMaxTess;                    // Offset: 24092 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // gShadowMap                        texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000} }
                dcl_constantbuffer cb0[1507], dynamicIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 22
                
                #line 319 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.x, -cb0[1506].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[1506].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[1506].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[1506].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[1506].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 330
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[1506].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 335
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[1502].yzwy  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 338
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 341
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 348
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 355
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 358
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 377
                ine r1.w, l(0, 0, 0, 0), cb1[12].x
                if_nz r1.w
                  nop 
                  mov r3.xyzw, v3.xyzw  // shadowPosH<0,1,2,3>
                
                #line 241 "LightHelper.fx"
                  div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 244
                  mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 261
                  add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, l(0.000000)  // percentLit<0:[0f,1f]>
                  add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,2f]>
                  add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,3f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,4f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,5f]>
                  add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,6f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,7f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,8f]>
                  add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, r3.yzyy, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.x  // percentLit<0:[0f,9f]>
                
                #line 264
                  div r3.x, r1.w, l(9.000000)  // percentLit<0:[0f,1f]>
                  mov r3.x, r3.x  // CalcShadowFactor<0:[0f,1f]>
                
                #line 379 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r3.x, r3.x  // shadow<0:[0f,1f]>
                else 
                  mov r3.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 384
                ilt r1.w, l(0), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r4.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r5.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r6.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r7.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                  mov r8.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                  mov r9.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                  mov r10.xyz, cb0[3].xyzx  // L<12,13,14>
                  mov r11.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r10.xyz, -r10.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r10.xyzx, r11.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r7.xyz, -r10.xyzx
                  dp3 r7.w, r7.xyzx, r11.xyzx
                  add r7.w, r7.w, r7.w
                  mov r7.w, -r7.w
                  mul r10.xyz, r7.wwww, r11.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.x, r7.xyzx, r12.xyzx
                  max r7.x, r7.x, l(0.000000)
                  log r7.x, r7.x
                  mul r7.x, r6.w, r7.x
                  exp r7.x, r7.x  // specFactor<0:NaN:Inf>
                  mul r5.xyzw, r5.xyzw, r1.wwww
                  mul r5.xyzw, r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r6.xyzw, r7.xxxx
                  mul r6.xyzw, r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r5.xyzw, r3.wwww, r5.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r6.xyzw, r3.wwww, r6.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r4.xyzw, r4.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r5.xyzw, r5.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r6.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r5.xyzw, r3.xxxx, r5.xyzw
                  add r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r3.xxxx, r6.xyzw
                  add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 384
                else 
                  mov r4.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r5.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r6.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                ilt r1.w, l(1), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[7].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r13.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r10.x, r10.xyzx, r15.xyzx
                  max r10.x, r10.x, l(0.000000)
                  log r10.x, r10.x
                  mul r10.x, r9.w, r10.x
                  exp r10.x, r10.x  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r1.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r10.xxxx
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r3.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r3.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                ilt r1.w, l(2), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[11].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r13.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r10.x, r10.xyzx, r15.xyzx
                  max r10.x, r10.x, l(0.000000)
                  log r10.x, r10.x
                  mul r10.x, r9.w, r10.x
                  exp r10.x, r10.x  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r1.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r10.xxxx
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r3.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r3.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                
                #line 397
                mov r1.w, l(0)  // i<0: 0>
                mov r7.xyzw, r4.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.w, r1.w  // i<0>
                loop 
                  ilt r10.x, r3.w, cb0[901].x
                  breakc_z r10.x
                
                #line 400
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r13.x, r3.w, l(5)
                  mov r14.xyzw, cb0[r13.x + 401].xyzw  // L<0,1,2,3>
                  mov r15.xyzw, cb0[r13.x + 402].xyzw  // L<4,5,6,7>
                  mov r16.xyzw, cb0[r13.x + 403].xyzw  // L<8,9,10,11>
                  mov r13.yzw, cb0[r13.x + 404].xxyz  // L<12,13,14>
                  mov r17.x, cb0[r13.x + 404].w  // L<15>
                  mov r17.yzw, cb0[r13.x + 405].xxyz  // L<16,17,18>
                  mov r18.xyz, v1.xyzx  // pos<0,1,2>
                  mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114 "LightHelper.fx"
                  mov r18.xyz, -r18.xyzx
                  add r13.xyz, r13.yzwy, r18.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 117
                  dp3 r13.w, r13.xyzx, r13.xyzx
                  sqrt r18.y, r13.w  // d<0:NaN:Inf>
                
                #line 120
                  lt r13.w, r17.x, r18.y
                
                #line 124
                  if_z r13.w
                    div r13.xyz, r13.xyzx, r18.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127
                    mul r10.xyzw, r10.xyzw, r14.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 132
                    dp3 r13.w, r13.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                    lt r14.x, l(0.000000), r13.w
                    mov r13.xyz, -r13.xyzx
                    dp3 r14.y, r13.xyzx, r19.xyzx
                    add r14.y, r14.y, r14.y
                    mov r14.y, -r14.y
                    mul r14.yzw, r14.yyyy, r19.xxyz
                    add r13.xyz, r13.xyzx, r14.yzwy  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.x, r13.xyzx, r20.xyzx
                    max r13.x, r13.x, l(0.000000)
                    log r13.x, r13.x
                    mul r13.x, r12.w, r13.x
                    exp r13.x, r13.x  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.wwww
                    mul r11.xyzw, r15.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx
                    mul r12.xyzw, r16.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 136
                    movc r11.xyzw, r14.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r14.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 146
                    mul r18.z, r18.y, r18.y
                    mov r18.x, l(1.000000)
                    dp3 r13.x, r17.yzwy, r18.xyzx
                    div r13.x, l(1.000000), r13.x  // att<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 124
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 400 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 404
                  mov r13.x, r3.w
                  mov r3.y, l(1.000000)
                  dp3 r3.y, r3.xyyx, icb[r13.x + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r8.xyzw, r8.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r9.xyzw, r9.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 397
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 410
                mov r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r6.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.y, r1.w  // i<0>
                loop 
                  ilt r3.w, r3.y, cb0[1502].x
                  breakc_z r3.w
                
                #line 413
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.w, r3.y, l(6)
                  mov r13.xyzw, cb0[r3.w + 902].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.w + 903].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.w + 904].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.w + 905].xyzx  // L<12,13,14>
                  mov r17.xyz, cb0[r3.w + 906].xyzx  // L<16,17,18>
                  mov r18.xyz, cb0[r3.w + 907].xyzx  // L<20,21,22>
                  mov r16.w, cb0[r3.w + 905].w  // L<15>
                  mov r3.w, cb0[r3.w + 906].w  // L<19>
                  mov r19.xyz, v1.xyzx  // pos<0,1,2>
                  mov r20.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r21.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 166 "LightHelper.fx"
                  mov r19.xyz, -r19.xyzx
                  add r16.xyz, r16.xyzx, r19.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  dp3 r17.w, r16.xyzx, r16.xyzx
                  sqrt r19.y, r17.w  // d<0:NaN:Inf>
                
                #line 172
                  lt r16.w, r16.w, r19.y
                
                #line 176
                  if_z r16.w
                    div r16.xyz, r16.xyzx, r19.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 184
                    dp3 r13.x, r16.xyzx, r20.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 188
                    lt r13.y, l(0.000000), r13.x
                    mov r16.xyz, -r16.xyzx
                    dp3 r13.z, r16.xyzx, r20.xyzx
                    add r13.z, r13.z, r13.z
                    mov r13.z, -r13.z
                    mul r20.xyz, r13.zzzz, r20.xyzx
                    add r20.xyz, r16.xyzx, r20.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.z, r20.xyzx, r21.xyzx
                    max r13.z, r13.z, l(0.000000)
                    log r13.z, r13.z
                    mul r13.z, r12.w, r13.z
                    exp r13.z, r13.z  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.zzzz
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 188
                    movc r11.xyzw, r13.yyyy, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.yyyy, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 198
                    dp3 r13.x, r16.xyzx, r17.xyzx
                    max r13.x, r13.x, l(0.000000)
                    log r13.x, r13.x
                    mul r3.w, r3.w, r13.x
                    exp r3.w, r3.w  // spot<0:NaN:Inf>
                
                #line 201
                    mul r19.z, r19.y, r19.y
                    mov r19.x, l(1.000000)
                    dp3 r13.x, r18.xyzx, r19.xyzx
                    div r13.x, r3.w, r13.x  // att<0:NaN:Inf>
                    mul r10.xyzw, r3.wwww, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 176
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 413 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 417
                  mov r3.w, r3.y
                  mov r3.z, l(1.000000)
                  dp3 r3.z, r3.xzzx, icb[r3.w + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.zzzz
                  add r5.xyzw, r5.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.zzzz
                  add r6.xyzw, r6.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 410
                  iadd r3.y, r3.y, l(1)  // i<0>
                endloop 
                
                #line 423
                add r1.xyzw, r4.xyzw, r5.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r1.xyzw, r6.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 432
                mov r0.x, -cb0[1503].x
                add r0.x, r0.x, r0.w
                div r0.x, r0.x, cb0[1503].y
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 435
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, cb0[1504].xyzw
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 438
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 412 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 106 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 110
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 113
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[8].xyzw  // vout<7:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb0[9].xyzw  // vout<8:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb0[10].xyzw  // vout<9:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb0[11].xyzw  // vout<10:NaN:Inf>
                
                #line 116
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o2.xyzw, r2.xyzw  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 17 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400 [unused]
                //   int dirLight_size;                 // Offset: 6400 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000 [unused]
                //   int pointLight_size;               // Offset: 14416 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600 [unused]
                //   int spotLight_size;                // Offset: 24032 Size:     4 [unused]
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4
                //   float gMaxDist;                    // Offset: 24084 Size:     4
                //   float gMinTess;                    // Offset: 24088 Size:     4
                //   float gMaxTess;                    // Offset: 24092 Size:     4
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1514], dynamicIndexed
                
                #line 252 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_input v[4][2].xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // hout<5,6,7,8>
                mov r2.xyzw, v[r0.x + 0][2].xyzw  // HS<5,6,7,8>
                mov o2.xyzw, r2.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 182
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 187
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 154
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 158
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 137
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 1508].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 140
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 143
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 148
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 158
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 154
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 164
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 192
                  mov r1.x, l(0)
                
                #line 202
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 192
                  mov o5.x, l(0)
                
                #line 214
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[1502].yzwy
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[1505].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[1505].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[1505].w
                  add r0.w, r0.w, cb0[1505].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 220
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 221
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 222
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 223
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 225
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 228
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 192
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 164 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_input vicp[4][2].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_temps 6
                
                #line 281 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 286
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r2.xy, r1.zwzz, r2.xyxx  // dout<7:NaN:Inf,8:NaN:Inf>
                mov r1.zw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 291
                mov r3.xyzw, -vicp[0][2].xyzw
                add r3.xyzw, r3.xyzw, vicp[1][2].xyzw
                mul r3.xyzw, r3.xyzw, vDomain.xxxx
                add r3.xyzw, r3.xyzw, vicp[0][2].xyzw
                mov r4.xyzw, -vicp[2][2].xyzw
                add r4.xyzw, r4.xyzw, vicp[3][2].xyzw
                mul r4.xyzw, r4.xyzw, vDomain.xxxx
                add r4.xyzw, r4.xyzw, vicp[2][2].xyzw
                mov r5.xyzw, -r3.xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, r4.xyzw, vDomain.yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw  // dout<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 296
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.z, r2.xyzw, cb0[4].xyzw  // dout<9:NaN:Inf>
                dp4 r4.w, r2.xyzw, cb0[5].xyzw  // dout<10:NaN:Inf>
                
                #line 299
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.x, r0.y  // dout<5:Inf>
                
                #line 307
                mov r0.w, l(1.000000)
                dp4 r5.x, r0.xyzw, cb0[0].xyzw  // dout<0:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[1].xyzw  // dout<1:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb0[2].xyzw  // dout<2:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb0[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r5.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r4.zzzw  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o3.xyzw, r3.xyzw  // DS<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.x  // DS<5:Inf>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400
                //   int dirLight_size;                 // Offset: 6400 Size:     4
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000
                //   int pointLight_size;               // Offset: 14416 Size:     4
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600
                //   int spotLight_size;                // Offset: 24032 Size:     4
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4
                //   float gFogRange;                   // Offset: 24052 Size:     4
                //   float4 gFogColor;                  // Offset: 24064 Size:    16
                //   float gMinDist;                    // Offset: 24080 Size:     4 [unused]
                //   float gMaxDist;                    // Offset: 24084 Size:     4 [unused]
                //   float gMinTess;                    // Offset: 24088 Size:     4 [unused]
                //   float gMaxTess;                    // Offset: 24092 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // gShadowMap                        texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000} }
                dcl_constantbuffer cb0[1507], dynamicIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 22
                
                #line 319 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.x, -cb0[1506].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[1506].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[1506].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[1506].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[1506].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 330
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[1506].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 335
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[1502].yzwy  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 338
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 341
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 348
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 355
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 358
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 377
                ine r1.w, l(0, 0, 0, 0), cb1[12].x
                if_nz r1.w
                  nop 
                  mov r3.xyzw, v3.xyzw  // shadowPosH<0,1,2,3>
                
                #line 241 "LightHelper.fx"
                  div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 244
                  mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 261
                  add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, l(0.000000)  // percentLit<0:[0f,1f]>
                  add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,2f]>
                  add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,3f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,4f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,5f]>
                  add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,6f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,7f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,8f]>
                  add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, r3.yzyy, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.x  // percentLit<0:[0f,9f]>
                
                #line 264
                  div r3.x, r1.w, l(9.000000)  // percentLit<0:[0f,1f]>
                  mov r3.x, r3.x  // CalcShadowFactor<0:[0f,1f]>
                
                #line 379 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r3.x, r3.x  // shadow<0:[0f,1f]>
                else 
                  mov r3.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 384
                ilt r1.w, l(0), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r4.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r5.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r6.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r7.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                  mov r8.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                  mov r9.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                  mov r10.xyz, cb0[3].xyzx  // L<12,13,14>
                  mov r11.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r10.xyz, -r10.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r10.xyzx, r11.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r7.xyz, -r10.xyzx
                  dp3 r7.w, r7.xyzx, r11.xyzx
                  add r7.w, r7.w, r7.w
                  mov r7.w, -r7.w
                  mul r10.xyz, r7.wwww, r11.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.x, r7.xyzx, r12.xyzx
                  max r7.x, r7.x, l(0.000000)
                  log r7.x, r7.x
                  mul r7.x, r6.w, r7.x
                  exp r7.x, r7.x  // specFactor<0:NaN:Inf>
                  mul r5.xyzw, r5.xyzw, r1.wwww
                  mul r5.xyzw, r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r6.xyzw, r7.xxxx
                  mul r6.xyzw, r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r5.xyzw, r3.wwww, r5.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r6.xyzw, r3.wwww, r6.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r4.xyzw, r4.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r5.xyzw, r5.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r6.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r5.xyzw, r3.xxxx, r5.xyzw
                  add r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r3.xxxx, r6.xyzw
                  add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 384
                else 
                  mov r4.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r5.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r6.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                ilt r1.w, l(1), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[7].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r13.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r10.x, r10.xyzx, r15.xyzx
                  max r10.x, r10.x, l(0.000000)
                  log r10.x, r10.x
                  mul r10.x, r9.w, r10.x
                  exp r10.x, r10.x  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r1.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r10.xxxx
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r3.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r3.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                ilt r1.w, l(2), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[11].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r13.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r10.x, r10.xyzx, r15.xyzx
                  max r10.x, r10.x, l(0.000000)
                  log r10.x, r10.x
                  mul r10.x, r9.w, r10.x
                  exp r10.x, r10.x  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r1.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r10.xxxx
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r3.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r3.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                
                #line 397
                mov r1.w, l(0)  // i<0: 0>
                mov r7.xyzw, r4.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.w, r1.w  // i<0>
                loop 
                  ilt r10.x, r3.w, cb0[901].x
                  breakc_z r10.x
                
                #line 400
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r13.x, r3.w, l(5)
                  mov r14.xyzw, cb0[r13.x + 401].xyzw  // L<0,1,2,3>
                  mov r15.xyzw, cb0[r13.x + 402].xyzw  // L<4,5,6,7>
                  mov r16.xyzw, cb0[r13.x + 403].xyzw  // L<8,9,10,11>
                  mov r13.yzw, cb0[r13.x + 404].xxyz  // L<12,13,14>
                  mov r17.x, cb0[r13.x + 404].w  // L<15>
                  mov r17.yzw, cb0[r13.x + 405].xxyz  // L<16,17,18>
                  mov r18.xyz, v1.xyzx  // pos<0,1,2>
                  mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114 "LightHelper.fx"
                  mov r18.xyz, -r18.xyzx
                  add r13.xyz, r13.yzwy, r18.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 117
                  dp3 r13.w, r13.xyzx, r13.xyzx
                  sqrt r18.y, r13.w  // d<0:NaN:Inf>
                
                #line 120
                  lt r13.w, r17.x, r18.y
                
                #line 124
                  if_z r13.w
                    div r13.xyz, r13.xyzx, r18.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127
                    mul r10.xyzw, r10.xyzw, r14.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 132
                    dp3 r13.w, r13.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                    lt r14.x, l(0.000000), r13.w
                    mov r13.xyz, -r13.xyzx
                    dp3 r14.y, r13.xyzx, r19.xyzx
                    add r14.y, r14.y, r14.y
                    mov r14.y, -r14.y
                    mul r14.yzw, r14.yyyy, r19.xxyz
                    add r13.xyz, r13.xyzx, r14.yzwy  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.x, r13.xyzx, r20.xyzx
                    max r13.x, r13.x, l(0.000000)
                    log r13.x, r13.x
                    mul r13.x, r12.w, r13.x
                    exp r13.x, r13.x  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.wwww
                    mul r11.xyzw, r15.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx
                    mul r12.xyzw, r16.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 136
                    movc r11.xyzw, r14.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r14.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 146
                    mul r18.z, r18.y, r18.y
                    mov r18.x, l(1.000000)
                    dp3 r13.x, r17.yzwy, r18.xyzx
                    div r13.x, l(1.000000), r13.x  // att<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 124
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 400 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 404
                  mov r13.x, r3.w
                  mov r3.y, l(1.000000)
                  dp3 r3.y, r3.xyyx, icb[r13.x + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r8.xyzw, r8.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r9.xyzw, r9.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 397
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 410
                mov r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r6.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.y, r1.w  // i<0>
                loop 
                  ilt r3.w, r3.y, cb0[1502].x
                  breakc_z r3.w
                
                #line 413
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.w, r3.y, l(6)
                  mov r13.xyzw, cb0[r3.w + 902].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.w + 903].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.w + 904].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.w + 905].xyzx  // L<12,13,14>
                  mov r17.xyz, cb0[r3.w + 906].xyzx  // L<16,17,18>
                  mov r18.xyz, cb0[r3.w + 907].xyzx  // L<20,21,22>
                  mov r16.w, cb0[r3.w + 905].w  // L<15>
                  mov r3.w, cb0[r3.w + 906].w  // L<19>
                  mov r19.xyz, v1.xyzx  // pos<0,1,2>
                  mov r20.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r21.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 166 "LightHelper.fx"
                  mov r19.xyz, -r19.xyzx
                  add r16.xyz, r16.xyzx, r19.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  dp3 r17.w, r16.xyzx, r16.xyzx
                  sqrt r19.y, r17.w  // d<0:NaN:Inf>
                
                #line 172
                  lt r16.w, r16.w, r19.y
                
                #line 176
                  if_z r16.w
                    div r16.xyz, r16.xyzx, r19.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 184
                    dp3 r13.x, r16.xyzx, r20.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 188
                    lt r13.y, l(0.000000), r13.x
                    mov r16.xyz, -r16.xyzx
                    dp3 r13.z, r16.xyzx, r20.xyzx
                    add r13.z, r13.z, r13.z
                    mov r13.z, -r13.z
                    mul r20.xyz, r13.zzzz, r20.xyzx
                    add r20.xyz, r16.xyzx, r20.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.z, r20.xyzx, r21.xyzx
                    max r13.z, r13.z, l(0.000000)
                    log r13.z, r13.z
                    mul r13.z, r12.w, r13.z
                    exp r13.z, r13.z  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.zzzz
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 188
                    movc r11.xyzw, r13.yyyy, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.yyyy, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 198
                    dp3 r13.x, r16.xyzx, r17.xyzx
                    max r13.x, r13.x, l(0.000000)
                    log r13.x, r13.x
                    mul r3.w, r3.w, r13.x
                    exp r3.w, r3.w  // spot<0:NaN:Inf>
                
                #line 201
                    mul r19.z, r19.y, r19.y
                    mov r19.x, l(1.000000)
                    dp3 r13.x, r18.xyzx, r19.xyzx
                    div r13.x, r3.w, r13.x  // att<0:NaN:Inf>
                    mul r10.xyzw, r3.wwww, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 176
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 413 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 417
                  mov r3.w, r3.y
                  mov r3.z, l(1.000000)
                  dp3 r3.z, r3.xzzx, icb[r3.w + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.zzzz
                  add r5.xyzw, r5.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.zzzz
                  add r6.xyzw, r6.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 410
                  iadd r3.y, r3.y, l(1)  // i<0>
                endloop 
                
                #line 423
                add r1.xyzw, r4.xyzw, r5.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r1.xyzw, r6.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 432
                mov r0.x, -cb0[1503].x
                add r0.x, r0.x, r0.w
                div r0.x, r0.x, cb0[1503].y
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 435
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, cb0[1504].xyzw
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 438
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 412 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 106 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 110
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 113
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[8].xyzw  // vout<7:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb0[9].xyzw  // vout<8:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb0[10].xyzw  // vout<9:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb0[11].xyzw  // vout<10:NaN:Inf>
                
                #line 116
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o2.xyzw, r2.xyzw  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 17 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400 [unused]
                //   int dirLight_size;                 // Offset: 6400 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000 [unused]
                //   int pointLight_size;               // Offset: 14416 Size:     4 [unused]
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600 [unused]
                //   int spotLight_size;                // Offset: 24032 Size:     4 [unused]
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 24052 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 24064 Size:    16 [unused]
                //   float gMinDist;                    // Offset: 24080 Size:     4
                //   float gMaxDist;                    // Offset: 24084 Size:     4
                //   float gMinTess;                    // Offset: 24088 Size:     4
                //   float gMaxTess;                    // Offset: 24092 Size:     4
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1514], dynamicIndexed
                
                #line 252 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_input v[4][2].xyzw
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // hout<5,6,7,8>
                mov r2.xyzw, v[r0.x + 0][2].xyzw  // HS<5,6,7,8>
                mov o2.xyzw, r2.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 182
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 187
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 154
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 158
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 137
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 1508].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 140
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 143
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 148
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 158
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 154
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 164
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 192
                  mov r1.x, l(0)
                
                #line 202
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 192
                  mov o5.x, l(0)
                
                #line 214
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[1502].yzwy
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[1505].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[1505].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[1505].w
                  add r0.w, r0.w, cb0[1505].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 220
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 221
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 222
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 223
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 124
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 129
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[1505].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 225
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 228
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 192
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 164 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_input vicp[4][2].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_temps 6
                
                #line 281 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 286
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r2.xy, r1.zwzz, r2.xyxx  // dout<7:NaN:Inf,8:NaN:Inf>
                mov r1.zw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 291
                mov r3.xyzw, -vicp[0][2].xyzw
                add r3.xyzw, r3.xyzw, vicp[1][2].xyzw
                mul r3.xyzw, r3.xyzw, vDomain.xxxx
                add r3.xyzw, r3.xyzw, vicp[0][2].xyzw
                mov r4.xyzw, -vicp[2][2].xyzw
                add r4.xyzw, r4.xyzw, vicp[3][2].xyzw
                mul r4.xyzw, r4.xyzw, vDomain.xxxx
                add r4.xyzw, r4.xyzw, vicp[2][2].xyzw
                mov r5.xyzw, -r3.xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, r4.xyzw, vDomain.yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw  // dout<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 296
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.z, r2.xyzw, cb0[4].xyzw  // dout<9:NaN:Inf>
                dp4 r4.w, r2.xyzw, cb0[5].xyzw  // dout<10:NaN:Inf>
                
                #line 299
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.x, r0.y  // dout<5:Inf>
                
                #line 307
                mov r0.w, l(1.000000)
                dp4 r5.x, r0.xyzw, cb0[0].xyzw  // dout<0:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[1].xyzw  // dout<1:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb0[2].xyzw  // dout<2:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb0[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r5.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r4.zzzw  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o3.xyzw, r3.xyzw  // DS<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.x  // DS<5:Inf>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[100];                 // Offset:    0 Size:  6400
                //   int dirLight_size;                 // Offset: 6400 Size:     4
                //      = 0x00000000 
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 6416
                //       float4 Diffuse;                // Offset: 6432
                //       float4 Specular;               // Offset: 6448
                //       float3 Position;               // Offset: 6464
                //       float Range;                   // Offset: 6476
                //       float3 Att;                    // Offset: 6480
                //       float pad;                     // Offset: 6492
                //
                //   } gPointLights[100];               // Offset: 6416 Size:  8000
                //   int pointLight_size;               // Offset: 14416 Size:     4
                //      = 0x00000000 
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset: 14432
                //       float4 Diffuse;                // Offset: 14448
                //       float4 Specular;               // Offset: 14464
                //       float3 Position;               // Offset: 14480
                //       float Range;                   // Offset: 14492
                //       float3 Direction;              // Offset: 14496
                //       float Spot;                    // Offset: 14508
                //       float3 Att;                    // Offset: 14512
                //       float pad;                     // Offset: 14524
                //
                //   } gSpotLights[100];                // Offset: 14432 Size:  9600
                //   int spotLight_size;                // Offset: 24032 Size:     4
                //      = 0x00000000 
                //   float3 gEyePosW;                   // Offset: 24036 Size:    12
                //   float gFogStart;                   // Offset: 24048 Size:     4
                //   float gFogRange;                   // Offset: 24052 Size:     4
                //   float4 gFogColor;                  // Offset: 24064 Size:    16
                //   float gMinDist;                    // Offset: 24080 Size:     4 [unused]
                //   float gMaxDist;                    // Offset: 24084 Size:     4 [unused]
                //   float gMinTess;                    // Offset: 24088 Size:     4 [unused]
                //   float gMaxTess;                    // Offset: 24092 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset: 24096 Size:     4
                //   float gTexelCellSpaceV;            // Offset: 24100 Size:     4
                //   float gWorldCellSpace;             // Offset: 24104 Size:     4
                //   float2 gTexScale;                  // Offset: 24112 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset: 24128 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  128 Size:    64 [unused]
                //   bool isShadowed;                   // Offset:  192 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float4 Reflect;                // Offset:  256
                //
                //   } gMaterial;                       // Offset:  208 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // gShadowMap                        texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                // TEXCOORD                 2   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000} }
                dcl_constantbuffer cb0[1507], dynamicIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 22
                
                #line 319 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                mov r0.x, -cb0[1506].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[1506].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[1506].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[1506].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[1506].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 330
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[1506].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 335
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[1502].yzwy  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 338
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 341
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 348
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 355
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 358
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 377
                ine r1.w, l(0, 0, 0, 0), cb1[12].x
                if_nz r1.w
                  nop 
                  mov r3.xyzw, v3.xyzw  // shadowPosH<0,1,2,3>
                
                #line 241 "LightHelper.fx"
                  div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 244
                  mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 261
                  add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, l(0.000000)  // percentLit<0:[0f,1f]>
                  add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,2f]>
                  add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,3f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,4f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,5f]>
                  add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,6f]>
                  add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,7f]>
                  add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.w  // percentLit<0:[0f,8f]>
                  add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, r3.yzyy, t3.xxxx, s2, r3.x
                  add r1.w, r1.w, r3.x  // percentLit<0:[0f,9f]>
                
                #line 264
                  div r3.x, r1.w, l(9.000000)  // percentLit<0:[0f,1f]>
                  mov r3.x, r3.x  // CalcShadowFactor<0:[0f,1f]>
                
                #line 379 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r3.x, r3.x  // shadow<0:[0f,1f]>
                else 
                  mov r3.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 384
                ilt r1.w, l(0), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r4.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r5.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r6.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r7.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                  mov r8.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                  mov r9.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                  mov r10.xyz, cb0[3].xyzx  // L<12,13,14>
                  mov r11.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r10.xyz, -r10.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r10.xyzx, r11.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r7.xyz, -r10.xyzx
                  dp3 r7.w, r7.xyzx, r11.xyzx
                  add r7.w, r7.w, r7.w
                  mov r7.w, -r7.w
                  mul r10.xyz, r7.wwww, r11.xyzx
                  add r7.xyz, r7.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.x, r7.xyzx, r12.xyzx
                  max r7.x, r7.x, l(0.000000)
                  log r7.x, r7.x
                  mul r7.x, r6.w, r7.x
                  exp r7.x, r7.x  // specFactor<0:NaN:Inf>
                  mul r5.xyzw, r5.xyzw, r1.wwww
                  mul r5.xyzw, r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r6.xyzw, r7.xxxx
                  mul r6.xyzw, r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r5.xyzw, r3.wwww, r5.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r6.xyzw, r3.wwww, r6.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r4.xyzw, r4.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r5.xyzw, r5.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r6.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r5.xyzw, r3.xxxx, r5.xyzw
                  add r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r6.xyzw, r3.xxxx, r6.xyzw
                  add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 384
                else 
                  mov r4.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r5.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r6.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                ilt r1.w, l(1), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[7].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r13.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r10.x, r10.xyzx, r15.xyzx
                  max r10.x, r10.x, l(0.000000)
                  log r10.x, r10.x
                  mul r10.x, r9.w, r10.x
                  exp r10.x, r10.x  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r1.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r10.xxxx
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r3.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r3.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                ilt r1.w, l(2), cb0[400].x
                if_nz r1.w
                
                #line 387
                  nop 
                  mov r7.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r8.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r9.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  mov r10.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                  mov r11.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                  mov r12.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                  mov r13.xyz, cb0[11].xyzx  // L<12,13,14>
                  mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78 "LightHelper.fx"
                  mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 81
                  mul r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 86
                  dp3 r1.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 90
                  lt r3.w, l(0.000000), r1.w
                  mov r10.xyz, -r13.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r13.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r10.x, r10.xyzx, r15.xyzx
                  max r10.x, r10.x, l(0.000000)
                  log r10.x, r10.x
                  mul r10.x, r9.w, r10.x
                  exp r10.x, r10.x  // specFactor<0:NaN:Inf>
                  mul r8.xyzw, r8.xyzw, r1.wwww
                  mul r8.xyzw, r11.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r9.xyzw, r9.xyzw, r10.xxxx
                  mul r9.xyzw, r12.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                  movc r8.xyzw, r3.wwww, r8.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  movc r9.xyzw, r3.wwww, r9.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 387 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r7.xyzw, r7.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r8.xyzw, r8.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r9.xyzw, r9.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 391
                  mul r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r5.xyzw, r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r8.xyzw, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  add r6.xyzw, r6.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 384
                endif 
                
                #line 397
                mov r1.w, l(0)  // i<0: 0>
                mov r7.xyzw, r4.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r5.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r9.xyzw, r6.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.w, r1.w  // i<0>
                loop 
                  ilt r10.x, r3.w, cb0[901].x
                  breakc_z r10.x
                
                #line 400
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r13.x, r3.w, l(5)
                  mov r14.xyzw, cb0[r13.x + 401].xyzw  // L<0,1,2,3>
                  mov r15.xyzw, cb0[r13.x + 402].xyzw  // L<4,5,6,7>
                  mov r16.xyzw, cb0[r13.x + 403].xyzw  // L<8,9,10,11>
                  mov r13.yzw, cb0[r13.x + 404].xxyz  // L<12,13,14>
                  mov r17.x, cb0[r13.x + 404].w  // L<15>
                  mov r17.yzw, cb0[r13.x + 405].xxyz  // L<16,17,18>
                  mov r18.xyz, v1.xyzx  // pos<0,1,2>
                  mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114 "LightHelper.fx"
                  mov r18.xyz, -r18.xyzx
                  add r13.xyz, r13.yzwy, r18.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 117
                  dp3 r13.w, r13.xyzx, r13.xyzx
                  sqrt r18.y, r13.w  // d<0:NaN:Inf>
                
                #line 120
                  lt r13.w, r17.x, r18.y
                
                #line 124
                  if_z r13.w
                    div r13.xyz, r13.xyzx, r18.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127
                    mul r10.xyzw, r10.xyzw, r14.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 132
                    dp3 r13.w, r13.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                    lt r14.x, l(0.000000), r13.w
                    mov r13.xyz, -r13.xyzx
                    dp3 r14.y, r13.xyzx, r19.xyzx
                    add r14.y, r14.y, r14.y
                    mov r14.y, -r14.y
                    mul r14.yzw, r14.yyyy, r19.xxyz
                    add r13.xyz, r13.xyzx, r14.yzwy  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.x, r13.xyzx, r20.xyzx
                    max r13.x, r13.x, l(0.000000)
                    log r13.x, r13.x
                    mul r13.x, r12.w, r13.x
                    exp r13.x, r13.x  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.wwww
                    mul r11.xyzw, r15.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx
                    mul r12.xyzw, r16.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 136
                    movc r11.xyzw, r14.xxxx, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r14.xxxx, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 146
                    mul r18.z, r18.y, r18.y
                    mov r18.x, l(1.000000)
                    dp3 r13.x, r17.yzwy, r18.xyzx
                    div r13.x, l(1.000000), r13.x  // att<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 124
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 400 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 404
                  mov r13.x, r3.w
                  mov r3.y, l(1.000000)
                  dp3 r3.y, r3.xyyx, icb[r13.x + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.yyyy
                  add r8.xyzw, r8.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.yyyy
                  add r9.xyzw, r9.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r7.xyzw, r7.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 397
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 410
                mov r4.xyzw, r7.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r5.xyzw, r8.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r6.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.y, r1.w  // i<0>
                loop 
                  ilt r3.w, r3.y, cb0[1502].x
                  breakc_z r3.w
                
                #line 413
                  nop 
                  mov r10.xyzw, cb1[13].xyzw  // mat<0,1,2,3>
                  mov r11.xyzw, cb1[14].xyzw  // mat<4,5,6,7>
                  mov r12.xyzw, cb1[15].xyzw  // mat<8,9,10,11>
                  imul null, r3.w, r3.y, l(6)
                  mov r13.xyzw, cb0[r3.w + 902].xyzw  // L<0,1,2,3>
                  mov r14.xyzw, cb0[r3.w + 903].xyzw  // L<4,5,6,7>
                  mov r15.xyzw, cb0[r3.w + 904].xyzw  // L<8,9,10,11>
                  mov r16.xyz, cb0[r3.w + 905].xyzx  // L<12,13,14>
                  mov r17.xyz, cb0[r3.w + 906].xyzx  // L<16,17,18>
                  mov r18.xyz, cb0[r3.w + 907].xyzx  // L<20,21,22>
                  mov r16.w, cb0[r3.w + 905].w  // L<15>
                  mov r3.w, cb0[r3.w + 906].w  // L<19>
                  mov r19.xyz, v1.xyzx  // pos<0,1,2>
                  mov r20.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r21.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 166 "LightHelper.fx"
                  mov r19.xyz, -r19.xyzx
                  add r16.xyz, r16.xyzx, r19.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  dp3 r17.w, r16.xyzx, r16.xyzx
                  sqrt r19.y, r17.w  // d<0:NaN:Inf>
                
                #line 172
                  lt r16.w, r16.w, r19.y
                
                #line 176
                  if_z r16.w
                    div r16.xyz, r16.xyzx, r19.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                    mul r10.xyzw, r10.xyzw, r13.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 184
                    dp3 r13.x, r16.xyzx, r20.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 188
                    lt r13.y, l(0.000000), r13.x
                    mov r16.xyz, -r16.xyzx
                    dp3 r13.z, r16.xyzx, r20.xyzx
                    add r13.z, r13.z, r13.z
                    mov r13.z, -r13.z
                    mul r20.xyz, r13.zzzz, r20.xyzx
                    add r20.xyz, r16.xyzx, r20.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r13.z, r20.xyzx, r21.xyzx
                    max r13.z, r13.z, l(0.000000)
                    log r13.z, r13.z
                    mul r13.z, r12.w, r13.z
                    exp r13.z, r13.z  // specFactor<0:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx
                    mul r11.xyzw, r14.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.zzzz
                    mul r12.xyzw, r15.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 188
                    movc r11.xyzw, r13.yyyy, r11.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r12.xyzw, r13.yyyy, r12.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 198
                    dp3 r13.x, r16.xyzx, r17.xyzx
                    max r13.x, r13.x, l(0.000000)
                    log r13.x, r13.x
                    mul r3.w, r3.w, r13.x
                    exp r3.w, r3.w  // spot<0:NaN:Inf>
                
                #line 201
                    mul r19.z, r19.y, r19.y
                    mov r19.x, l(1.000000)
                    dp3 r13.x, r18.xyzx, r19.xyzx
                    div r13.x, r3.w, r13.x  // att<0:NaN:Inf>
                    mul r10.xyzw, r3.wwww, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r11.xyzw, r11.xyzw, r13.xxxx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mul r12.xyzw, r12.xyzw, r13.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 176
                  else 
                    mov r10.xyzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r11.xyzw, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                    mov r12.xyzw, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f,3: 0f>
                  endif 
                
                #line 413 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\Terrain.fx"
                  mov r10.xyzw, r10.xyzw  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r11.xyzw, r11.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r12.xyzw, r12.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 417
                  mov r3.w, r3.y
                  mov r3.z, l(1.000000)
                  dp3 r3.z, r3.xzzx, icb[r3.w + 0].xyzx
                  mul r11.xyzw, r11.xyzw, r3.zzzz
                  add r5.xyzw, r5.xyzw, r11.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mul r11.xyzw, r12.xyzw, r3.zzzz
                  add r6.xyzw, r6.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  add r4.xyzw, r4.xyzw, r10.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 410
                  iadd r3.y, r3.y, l(1)  // i<0>
                endloop 
                
                #line 423
                add r1.xyzw, r4.xyzw, r5.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r1.xyzw, r6.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 432
                mov r0.x, -cb0[1503].x
                add r0.x, r0.x, r0.w
                div r0.x, r0.x, cb0[1503].y
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 435
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, cb0[1504].xyzw
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 438
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 412 instruction slots used
                            
            };
        }

    }

}

