//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[100];   // Offset:    0, size: 6400
    float3  gEyePosW;                   // Offset: 6400, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
}

//
// 2 local object(s)
//
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 2
                
                #line 62 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\SimpleLine.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // worldTemp<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // worldTemp<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // worldTemp<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // worldTemp<3:NaN:Inf>
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // vout<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // vout<1:NaN:Inf>
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // vout<2:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // vout<3:NaN:Inf>
                mov r1.xyzw, v1.xyzw  // vout<4,5,6,7>
                mov o0.xyzw, r0.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r1.xyzw  // VS<4,5,6,7>
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                
                #line 71 "C:\Users\JS\Documents\GitRepository\DX_Portfolio\FX\SimpleLine.fx"
                mov o0.xyzw, v1.xyzw  // PS<0,1,2,3>
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

